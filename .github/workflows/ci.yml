name: CI

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-test-package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
          - os: windows-latest
            runtime: win-arm64
          - os: ubuntu-latest
            runtime: linux-x64
          - os: ubuntu-latest
            runtime: linux-arm64
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: '1'
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: '1'
      DOTNET_NOLOGO: '1'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for GitVersion to work properly

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.306'

      - name: Restore
        run: dotnet restore LinkRouter.sln -r ${{ matrix.runtime }}

      - name: Restore .NET tools
        run: dotnet tool restore

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: '6.0.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.0.0
        with:
          useConfigFile: true

      - name: Display GitVersion outputs
        run: |
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"

      - name: Build
        run: dotnet build LinkRouter.sln -c Release --no-restore

      - name: Test (Windows)
        if: runner.os == 'Windows'
        run: ./build/scripts/run-tests.ps1 -Arguments test,-c,Release

      - name: Test (Linux)
        if: runner.os == 'Linux'
        run: dotnet test LinkRouter.sln -c Release --no-build --verbosity normal

      - name: Publish Linux binaries
        if: runner.os == 'Linux'
        run: |
          dotnet publish src/LinkRouter.Launcher/LinkRouter.Launcher.csproj -c Release -r ${{ matrix.runtime }} --self-contained -o publish/Launcher
          dotnet publish src/LinkRouter.Settings/LinkRouter.Settings.csproj -c Release -r ${{ matrix.runtime }} --self-contained -o publish/Settings

      - name: Package Linux binaries
        if: runner.os == 'Linux'
        run: |
          mkdir -p artifacts/linux
          cd publish/Launcher
          tar -czf ../../artifacts/linux/LinkRouter.Launcher-${{ matrix.runtime }}-${{ steps.gitversion.outputs.semVer }}.tar.gz *
          cd ../Settings
          tar -czf ../../artifacts/linux/LinkRouter.Settings-${{ matrix.runtime }}-${{ steps.gitversion.outputs.semVer }}.tar.gz *

      - name: Upload Linux Launcher artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linkrouter-launcher-${{ matrix.runtime }}
          path: artifacts/linux/LinkRouter.Launcher-*.tar.gz
          if-no-files-found: error

      - name: Upload Linux Settings artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linkrouter-settings-${{ matrix.runtime }}
          path: artifacts/linux/LinkRouter.Settings-*.tar.gz
          if-no-files-found: error

      - name: Package MSIX
        if: runner.os == 'Windows'
        run: pwsh ./build/scripts/package-msix.ps1 -Configuration Release -Runtime ${{ matrix.runtime }} -Version ${{ steps.gitversion.outputs.majorMinorPatch }}.0

      - name: Upload MSIX artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: linkrouter-msix-${{ matrix.runtime }}
          path: artifacts/msix/*.msix
          if-no-files-found: error

      - name: Upload MSIX layout
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: linkrouter-msix-layout-${{ matrix.runtime }}
          path: artifacts/msix/layout/**
          if-no-files-found: warn

      - name: Package MSI
        if: runner.os == 'Windows'
        run: |
          $msiVersion = "${{ steps.gitversion.outputs.majorMinorPatch }}"
          Write-Host "Packaging MSI version $msiVersion"
          ./build/scripts/package-msi.ps1 -Configuration Release -Runtime ${{ matrix.runtime }} -Version $msiVersion

      - name: Upload MSI artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: linkrouter-msi-${{ matrix.runtime }}
          path: artifacts/msi/*.msi
          if-no-files-found: error

  build-bundle:
    needs: build-test-package
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.306'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: '6.0.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.0.0
        with:
          useConfigFile: true

      - name: Download MSI artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: linkrouter-msi-*
          path: msi-artifacts

      - name: List downloaded artifacts
        run: Get-ChildItem -Path msi-artifacts -Recurse

      - name: Build Bundle
        run: |
          $version = "${{ steps.gitversion.outputs.majorMinorPatch }}"
          $msiX64 = (Get-ChildItem -Path msi-artifacts/linkrouter-msi-win-x64 -Filter *.msi).FullName
          $msiArm64 = (Get-ChildItem -Path msi-artifacts/linkrouter-msi-win-arm64 -Filter *.msi).FullName
          Write-Host "Building bundle with MSIs:"
          Write-Host "  x64: $msiX64"
          Write-Host "  ARM64: $msiArm64"
          ./build/scripts/package-bundle.ps1 -Version $version -MsiX64Path $msiX64 -MsiArm64Path $msiArm64

      - name: Upload Bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: linkrouter-bundle
          path: artifacts/bundle/*.exe
          if-no-files-found: error

  create-release:
    needs: build-bundle
    runs-on: windows-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: '6.0.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.0.0
        with:
          useConfigFile: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Prepare release files
        run: |
          New-Item -ItemType Directory -Path release-files -Force
          # Copy MSIX and MSI files
          Get-ChildItem -Path release-artifacts -Recurse -Include *.msix,*.msi | Copy-Item -Destination release-files
          # Copy only the bundle Setup.exe (not individual binaries)
          Get-ChildItem -Path release-artifacts -Recurse -Include *_Setup.exe | Copy-Item -Destination release-files

      - name: Generate release title
        id: release_title
        run: |
          $version = "${{ steps.gitversion.outputs.majorMinorPatch }}"
          $prerelease = "${{ steps.gitversion.outputs.preReleaseTag }}"
          if ($prerelease) {
            # Pad prerelease number to 4 digits for proper sorting
            $paddedPrerelease = $prerelease.PadLeft(4, '0')
            $title = "Release v$version-$paddedPrerelease"
          } else {
            $title = "Release v$version"
          }
          echo "title=$title" >> $env:GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.gitversion.outputs.semVer }}
          name: ${{ steps.release_title.outputs.title }}
          body: |
            ## LinkRouter v${{ steps.gitversion.outputs.semVer }}

            ### Downloads

            **Recommended**: Download the unified installer that automatically detects your system architecture:
            - **LinkRouter_${{ steps.gitversion.outputs.majorMinorPatch }}_Setup.exe** - Universal installer for all Windows architectures

            **Alternative downloads** (architecture-specific):
            - **MSIX Packages**: Sideload installation (separate for x64 and ARM64)
            - **MSI Installers**: Traditional Windows installer (separate for x64 and ARM64)

            ### Supported Architectures
            - Windows x64 (Intel/AMD 64-bit)
            - Windows ARM64 (ARM-based Windows devices)

            ### Version Information
            - **Version**: ${{ steps.gitversion.outputs.fullSemVer }}
            - **Commit**: ${{ steps.gitversion.outputs.sha }}
            - **Branch**: ${{ steps.gitversion.outputs.branchName }}

            See the [CHANGELOG](CHANGELOG.md) for details on what's new in this release.
          files: release-files/*
          draft: false
          prerelease: ${{ steps.gitversion.outputs.preReleaseTag != '' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
